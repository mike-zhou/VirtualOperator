@startuml

participant app
participant stepper_1
participant stepper_2
participant timer
participant encoder_x
participant encoder_y


note across: run active

app -> stepper_1: stepper_set_forward
app -> stepper_1: stepper_run_active
app -> stepper_1: stepper_get_current_pulse_width
app -> timer: timer_start
loop
    timer -> stepper_1: on_stepper_pulse_end
    activate stepper_1
        alt out of sync
            stepper_1 -> app: on_stepper_out_of_sync_interrupt
        else out of boundary
            stepper_1 -> app: on_stepper_out_of_scope_interrupt
        end
    deactivate stepper_1
    alt next pulse width > 0
        timer -> timer: update_overflow_threshold
    end
end


note across: run passive

note over stepper_2: set passive indexes
loop
    app -> stepper_2: stepper_set_passive_step_indexes
end
app -> stepper_2: stepper_set_forward

app -> stepper_1: stepper_couple_passive
app -> stepper_1: stepper_set_forward
app -> stepper_1: stepper_run_active
app -> stepper_1: stepper_get_current_pulse_width
app -> timer: timer_start
loop
    timer -> stepper_1: on_stepper_pulse_end
    activate stepper_1
        stepper_1 -> stepper_2: on_active_step
        activate stepper_2
            stepper_2 -> encoder_y: get_encoder
        deactivate stepper_2
        stepper_1 -> encoder_x: get_encoder
    deactivate stepper_1
        alt next pulse width > 0
        timer -> timer: update_overflow_threshold
    end

end

app -> stepper_1: stepper_get_state
app -> stepper_2: stepper_get_state


note over stepper_2: set active pulse widths
loop
    app -> stepper_2: stepper_set_active_cruise_pulse_width
end
app -> stepper_2: stepper_set_active_cruise_pulse_width
loop
    app -> stepper_2: stepper_set_active_rampdown_pulse_widths
end


note across: run force

app -> stepper_1: stepper_set_enable
app -> stepper_1: stepper_set_forward
app -> stepper_1: stepper_run_force
app -> stepper_1: stepper_get_current_pulse_width
app -> timer: timer_start
loop
    timer -> stepper_1: on_stepper_pulse_end
    alt next pulse width > 0
        timer -> timer: update_overflow_threshold
    end
end


@enduml
